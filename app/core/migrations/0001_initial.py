# Generated by Django 3.2.16 on 2023-01-29 10:12

import core.models.post
import core.models.story
from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=100)),
                ('last_name', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('type', models.SmallIntegerField(choices=[(1, 'user_type_standard'), (2, 'user_type_premium'), (3, 'user_type_mod'), (9, 'user_type_admin')], default=1)),
                ('address', models.CharField(blank=True, max_length=500)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('radius', models.PositiveIntegerField(blank=True, null=True)),
                ('firebase_id', models.CharField(blank=True, max_length=255)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('write_date', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Advice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('write_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('upvote', models.SmallIntegerField(blank=True, null=True)),
                ('downvote', models.SmallIntegerField(blank=True, null=True)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('write_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('price', models.FloatField()),
                ('image', models.ImageField(upload_to='')),
                ('type', models.SmallIntegerField()),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('write_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(editable=False, max_length=10, unique=True)),
                ('type', models.SmallIntegerField(choices=[(1, 'post_type_lost'), (2, 'post_type_found')])),
                ('location', django.contrib.gis.db.models.fields.PointField(geography=True, srid=4326)),
                ('address', models.CharField(max_length=500)),
                ('pet_type', models.SmallIntegerField(choices=[(1, 'pet_cat'), (2, 'pet_dog'), (3, 'pet_bird'), (4, 'pet_rabbit'), (5, 'pet_turtle'), (6, 'pet_reptile'), (7, 'pet_hamster'), (8, 'pet_ferret'), (99, 'pet_other')])),
                ('gender', models.SmallIntegerField(choices=[(0, 'pet_gender_not_specified'), (1, 'pet_gender_male'), (2, 'pet_gender_female')], default=0)),
                ('age', models.SmallIntegerField(blank=True, null=True)),
                ('microchip', models.SmallIntegerField(choices=[(0, 'pet_microchip_not_specified'), (1, 'pet_microchip_yes'), (2, 'pet_microchip_no')], default=0)),
                ('sterilised', models.SmallIntegerField(choices=[(0, 'pet_sterilised_not_specified'), (1, 'pet_sterilised_yes'), (2, 'pet_sterilised_no')], default=0)),
                ('specific_marks', models.CharField(blank=True, max_length=500)),
                ('pet_name', models.CharField(blank=True, max_length=100)),
                ('text', models.TextField()),
                ('contacts', models.JSONField(blank=True, null=True)),
                ('status', models.SmallIntegerField(choices=[(0, 'post_status_draft'), (1, 'post_status_published'), (2, 'post_status_closed')], default=0)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('write_date', models.DateTimeField(auto_now=True)),
                ('publish_date', models.DateTimeField(blank=True, null=True)),
                ('close_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('end_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('image', models.ImageField(blank=True, upload_to=core.models.story.story_image_directory_path, verbose_name='Immagine della storia')),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('write_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PostImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_default', models.BooleanField(default=False)),
                ('image', models.ImageField(blank=True, upload_to=core.models.post.post_image_directory_path, verbose_name='Immagine del post')),
                ('description', models.TextField()),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_images', to='core.post')),
            ],
        ),
        migrations.CreateModel(
            name='PostFlag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_flags', to='core.post')),
            ],
        ),
        migrations.CreateModel(
            name='CommentFlag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_flags', to='core.comment')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_flags', to='core.post')),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.post'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL),
        ),
    ]
